pipeline {
    agent any
    
    environment {
        DOCKER_COMPOSE_DIR = "/var/jenkins_shared/mr_patent"
        DOCKER_COMPOSE = '$HOME/bin/docker-compose'
        BRANCH_NAME = "${env.BRANCH_NAME}"
    }
    
    stages {
        stage('Setup') {
            steps {
                echo '====== 환경 설정 시작 ======'
                // 도커 컴포즈 설치 확인 또는 설치
                sh '''
                    if ! command -v docker-compose &> /dev/null; then
                        echo "Docker Compose not found, installing..."
                        mkdir -p $HOME/bin
                        curl -L "https://github.com/docker/compose/releases/download/v2.24.3/docker-compose-$(uname -s)-$(uname -m)" -o $HOME/bin/docker-compose
                        chmod +x $HOME/bin/docker-compose
                        export PATH=$HOME/bin:$PATH
                    else
                        echo "Docker Compose already installed"
                    fi
                    docker-compose --version || $HOME/bin/docker-compose --version
                '''
                echo '====== 환경 설정 완료 ======'
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_AUTHOR = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    env.GIT_EMAIL = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                }
            }
        }
        
        stage('Build FastAPI') {
            steps {
                echo '====== FastAPI 빌드 시작 ======'
                dir('mr_patent_bigdata') {
                    sh '''
                        echo "현재 디렉토리 내용:"
                        ls -la
                        echo "app 디렉토리 내용:"
                        ls -la app
                        echo "Pipfile 내용:"
                        cat Pipfile
                    '''
                    // pipenv로 의존성 설치 추가
                    sh '''
                        pip install pipenv
                        pipenv install
                    '''
                    echo '====== FastAPI 빌드 완료 ======'
                }
            }
        }
        
        stage('Test') {
            steps {
                echo '====== FastAPI 테스트 시작 ======'
                dir('mr_patent_bigdata') {
                    // 테스트 스크립트 추가 (필요시 수정)
                    sh '''
                        pipenv run pytest || true
                    '''
                }
                echo '====== FastAPI 테스트 완료 ======'
            }
        }
        
            stage('Deploy FastAPI') {
            steps {
                echo '====== FastAPI 배포 시작 ======'
                sh '''
                    # 소스 디렉토리의 파일들을 대상 디렉토리로 복사
                    mkdir -p ${DOCKER_COMPOSE_DIR}/fastapi
                    cp -rf mr_patent_bigdata/app ${DOCKER_COMPOSE_DIR}/fastapi/
                    cp -rf mr_patent_bigdata/models ${DOCKER_COMPOSE_DIR}/fastapi/
                    cp -f mr_patent_bigdata/Pipfile ${DOCKER_COMPOSE_DIR}/fastapi/
                    cp -f mr_patent_bigdata/Pipfile.lock ${DOCKER_COMPOSE_DIR}/fastapi/
                    
                    # requirements.txt 생성 (선택적)
                    if [ ! -f ${DOCKER_COMPOSE_DIR}/fastapi/requirements.txt ]; then
                        pipenv lock -r > ${DOCKER_COMPOSE_DIR}/fastapi/requirements.txt
                        echo "pydantic-settings" >> ${DOCKER_COMPOSE_DIR}/fastapi/requirements.txt
                    fi
                    
                    # 도커 컴포즈로 fastapi 서비스 재배포
                    cd ${DOCKER_COMPOSE_DIR}
                    $HOME/bin/docker-compose -f docker-compose.yml stop fastapi
                    $HOME/bin/docker-compose -f docker-compose.yml rm -f fastapi
                    $HOME/bin/docker-compose -f docker-compose.yml build --no-cache fastapi
                    $HOME/bin/docker-compose -f docker-compose.yml up -d fastapi
                    docker image prune -f
                '''
                echo '====== FastAPI 배포 완료 ======'
            }
        }
        
        stage('Notification') {
            steps {
                echo 'jenkins notification!'
            }
        }
    }
    
    post {
        success {
            echo '====== 파이프라인 성공 ======'
            mattermostSend(
                color: 'good',
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR}(${env.GIT_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/hgafhbr6n7fe7japbi7n5tw36o',
                channel: 'D208-GitLab-Build'
            )
        }
        failure {
            echo '====== 파이프라인 실패 ======'
            mattermostSend(
                color: 'danger',
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR}(${env.GIT_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/hgafhbr6n7fe7japbi7n5tw36o',
                channel: 'D208-GitLab-Build'
            )
        }
        always {
            echo '====== 파이프라인 종료 ======'
            cleanWs()
        }
    }
}