pipeline {
   agent any
   
   environment {
       DOCKER_COMPOSE_DIR = "/var/jenkins_shared/mr_patent"
       DOCKER_COMPOSE = '$HOME/bin/docker-compose'
       BRANCH_NAME = "${env.BRANCH_NAME}"
       PYTHON_VERSION = "3.9"
       PATH = "/usr/local/bin:$HOME/.local/bin:$PATH"
   }
   
   stages {
       stage('Debug Python Environment') {
           steps {
               sh '''
                   echo "현재 Python 경로:"
                   which python3
                   which pip3
                   
                   echo "Python 버전:"
                   python3 --version
                   
                   echo "PATH 확인:"
                   echo $PATH
               '''
           }
       }
       
       stage('Setup Python Environment') {
           steps {
               sh '''
                   # Python 설치 확인 및 설치
                   if ! command -v python3 &> /dev/null; then
                       echo "Python3 not found, installing..."
                       sudo apt-get update
                       sudo apt-get install -y python3 python3-pip python3-venv
                   fi

                   # Python 및 pip 설치 확인
                   python3 --version
                   python3 -m pip --version

                   # 가상환경 및 의존성 관리 도구 설치
                   python3 -m pip install --user virtualenv pipenv
               '''
           }
       }
       
       stage('Checkout') {
           steps {
               checkout scm
               script {
                   env.GIT_AUTHOR = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                   env.GIT_EMAIL = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
               }
           }
       }
       
       stage('Build FastAPI') {
           steps {
               echo '====== FastAPI 빌드 시작 ======'
               dir('mr_patent_bigdata') {
                   sh '''
                       # 가상환경 생성 및 활성화
                       python3 -m venv venv
                       source venv/bin/activate

                       # pip 및 pipenv 최신 버전으로 업그레이드
                       pip install --upgrade pip
                       pip install pipenv

                       # 의존성 설치
                       pipenv install --dev

                       echo "현재 디렉토리 내용:"
                       ls -la
                       echo "app 디렉토리 내용:"
                       ls -la app
                       echo "Pipfile 내용:"
                       cat Pipfile
                   '''
                   echo '====== FastAPI 빌드 완료 ======'
               }
           }
       }
       
       stage('Test') {
           steps {
               echo '====== FastAPI 테스트 시작 ======'
               dir('mr_patent_bigdata') {
                   sh '''
                       source venv/bin/activate
                       pipenv run pytest || true
                   '''
               }
               echo '====== FastAPI 테스트 완료 ======'
           }
       }
       
       stage('Deploy FastAPI') {
           steps {
               echo '====== FastAPI 배포 시작 ======'
               sh '''
                   # 소스 디렉토리의 파일들을 대상 디렉토리로 복사
                   mkdir -p ${DOCKER_COMPOSE_DIR}/fastapi
                   cp -rf mr_patent_bigdata/app ${DOCKER_COMPOSE_DIR}/fastapi/
                   cp -rf mr_patent_bigdata/models ${DOCKER_COMPOSE_DIR}/fastapi/
                   cp -f mr_patent_bigdata/Pipfile ${DOCKER_COMPOSE_DIR}/fastapi/
                   cp -f mr_patent_bigdata/Pipfile.lock ${DOCKER_COMPOSE_DIR}/fastapi/
                   
                   # requirements.txt 생성
                   cd mr_patent_bigdata
                   pipenv lock -r > ${DOCKER_COMPOSE_DIR}/fastapi/requirements.txt
                   
                   # 도커 컴포즈로 fastapi 서비스 재배포
                   cd ${DOCKER_COMPOSE_DIR}
                   $HOME/bin/docker-compose -f docker-compose.yml stop fastapi
                   $HOME/bin/docker-compose -f docker-compose.yml rm -f fastapi
                   $HOME/bin/docker-compose -f docker-compose.yml build --no-cache fastapi
                   $HOME/bin/docker-compose -f docker-compose.yml up -d fastapi
                   docker image prune -f
               '''
               echo '====== FastAPI 배포 완료 ======'
           }
       }
       
       stage('Notification') {
           steps {
               echo 'jenkins notification!'
           }
       }
   }
   
   post {
       success {
           echo '====== 파이프라인 성공 ======'
           mattermostSend(
               color: 'good',
               message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR}(${env.GIT_EMAIL})\n(<${env.BUILD_URL}|Details>)",
               endpoint: 'https://meeting.ssafy.com/hooks/hgafhbr6n7fe7japbi7n5tw36o',
               channel: 'D208-GitLab-Build'
           )
       }
       failure {
           echo '====== 파이프라인 실패 ======'
           mattermostSend(
               color: 'danger',
               message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR}(${env.GIT_EMAIL})\n(<${env.BUILD_URL}|Details>)",
               endpoint: 'https://meeting.ssafy.com/hooks/hgafhbr6n7fe7japbi7n5tw36o',
               channel: 'D208-GitLab-Build'
           )
       }
       always {
           echo '====== 파이프라인 종료 ======'
           cleanWs()
       }
   }
}