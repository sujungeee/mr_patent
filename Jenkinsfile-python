pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_DIR = "/var/jenkins_shared/mr_patent"
        DOCKER_COMPOSE = "$HOME/bin/docker-compose"
        BRANCH_NAME = "${env.BRANCH_NAME}"
        PYTHON_VERSION = "3.9"
        PATH = "/usr/local/bin:/usr/bin:/bin:$HOME/.local/bin"
    }

    stages {
        // stage('Check System Environment') {
        //     steps {
        //         sh '''
        //             echo "Operating System:"
        //             cat /etc/os-release

        //             echo "\\nInstalled Packages:"
        //             apt list --installed | grep -E "python|pip"

        //             echo "\\nSystem Path:"
        //             echo $PATH
        //         '''
        //     }
        // }

        stage('Setup Python Environment') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y python3 python3-pip python3-venv
                    python3 --version
                    python3 -m pip --version
                '''
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_AUTHOR = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    env.GIT_EMAIL = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                }
            }
        }

        stage('Build FastAPI') {
            steps {
                echo '====== FastAPI 빌드 시작 ======'
                dir('mr_patent_bigdata') {
                    sh '''
                        pip install --upgrade pip
                        pip install pipenv
                        pipenv install --dev || pipenv install
                        ls -la
                        ls -la app
                        cat Pipfile
                    '''
                    echo '====== FastAPI 빌드 완료 ======'
                }
            }
        }

        stage('Test') {
            steps {
                echo '====== FastAPI 테스트 시작 ======'
                dir('mr_patent_bigdata') {
                    sh '''
                        . venv/bin/activate
                        pipenv run pytest || true
                    '''
                }
                echo '====== FastAPI 테스트 완료 ======'
            }
        }

        stage('Deploy FastAPI') {
            steps {
                echo '====== FastAPI 배포 시작 ======'
                // 환경 설정 파일 복사
                withCredentials([
                    file(credentialsId: 'env_file', variable: 'ENV_FILE'),
                    file(credentialsId: 'application_yml_file', variable: 'APP_YML_FILE')
                ]) {
                    sh '''
                        mkdir -p ${DOCKER_COMPOSE_DIR}/fastapi/config
                        cp -f ${ENV_FILE} ${DOCKER_COMPOSE_DIR}/fastapi/config/.env
                        cp -f ${APP_YML_FILE} ${DOCKER_COMPOSE_DIR}/fastapi/config/application.yml
                        chmod 600 ${DOCKER_COMPOSE_DIR}/fastapi/config/.env
                        chmod 600 ${DOCKER_COMPOSE_DIR}/fastapi/config/application.yml
                    '''
                }

                sh '''
                    mkdir -p ${DOCKER_COMPOSE_DIR}/fastapi
                    cp -rf mr_patent_bigdata/app ${DOCKER_COMPOSE_DIR}/fastapi/
                    cp -rf mr_patent_bigdata/models ${DOCKER_COMPOSE_DIR}/fastapi/
                    cp -f mr_patent_bigdata/Pipfile ${DOCKER_COMPOSE_DIR}/fastapi/
                    cp -f mr_patent_bigdata/Pipfile.lock ${DOCKER_COMPOSE_DIR}/fastapi/
                    cd mr_patent_bigdata
                    pipenv lock -r > ${DOCKER_COMPOSE_DIR}/fastapi/requirements.txt

                    # 백엔드 Dockerfile 복사
                    mkdir -p ${DOCKER_COMPOSE_DIR}/backend
                    cp -f deploy/backend/Dockerfile ${DOCKER_COMPOSE_DIR}/backend/Dockerfile

                    cd ${DOCKER_COMPOSE_DIR}
                    $HOME/bin/docker-compose -f docker-compose.yml stop fastapi || true
                    $HOME/bin/docker-compose -f docker-compose.yml rm -f fastapi || true
                    $HOME/bin/docker-compose -f docker-compose.yml build --no-cache fastapi
                    $HOME/bin/docker-compose -f docker-compose.yml up -d fastapi
                    docker image prune -f
                '''
                echo '====== FastAPI 배포 완료 ======'
            }
        }


        stage('Notification') {
            steps {
                echo 'jenkins notification!'
            }
        }
    }

    post {
        success {
            echo '====== 파이프라인 성공 ======'
            mattermostSend(
                color: 'good',
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR}(${env.GIT_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/hgafhbr6n7fe7japbi7n5tw36o',
                channel: 'D208-GitLab-Build'
            )
        }
        failure {
            echo '====== 파이프라인 실패 ======'
            mattermostSend(
                color: 'danger',
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR}(${env.GIT_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/hgafhbr6n7fe7japbi7n5tw36o',
                channel: 'D208-GitLab-Build'
            )
        }
        always {
            echo '====== 파이프라인 종료 ======'
        }
    }
}
