pipeline {
    agent any
    
    environment {
        DOCKER_COMPOSE_DIR = '/home/ubuntu/mr_patent'
        BRANCH_NAME = "${env.BRANCH_NAME}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_AUTHOR = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    env.GIT_EMAIL = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                }
            }
        }
        
        stage('Build FastAPI') {
            steps {
                echo '====== FastAPI 빌드 시작 ======'
                dir('mr_patent_bigdata') {
                    sh '''
                        echo "현재 디렉토리 내용:"
                        ls -la
                        echo "app 디렉토리 내용:"
                        ls -la app
                        echo "Pipfile 내용:"
                        cat Pipfile
                    '''
                    echo '====== FastAPI 빌드 완료 ======'
                }
            }
        }
        
            stage('Deploy FastAPI') {
            steps {
                echo '====== FastAPI 배포 시작 ======'
                sh '''
                    # 상세 디버깅 로그 추가
                    echo "소스 디렉토리 mr_patent_bigdata 내용:"
                    ls -la mr_patent_bigdata
                    
                    echo "대상 디렉토리 ${DOCKER_COMPOSE_DIR}/fastapi 현재 내용:"
                    ls -la ${DOCKER_COMPOSE_DIR}/fastapi || true
                    
                    # 기존 컨테이너 강제 제거
                    docker rm -f mr_patent_fastapi || true
                    
                    # sudo 권한으로 디렉토리 생성 및 소유권 변경
                    sudo mkdir -p ${DOCKER_COMPOSE_DIR}/fastapi || true
                    sudo chown -R jenkins:jenkins ${DOCKER_COMPOSE_DIR}/fastapi || true
                    
                    # 특정 파일/디렉토리 개별 복사
                    cp -f mr_patent_bigdata/Pipfile ${DOCKER_COMPOSE_DIR}/fastapi/
                    cp -f mr_patent_bigdata/Pipfile.lock ${DOCKER_COMPOSE_DIR}/fastapi/
                    cp -rf mr_patent_bigdata/app ${DOCKER_COMPOSE_DIR}/fastapi/
                    cp -rf mr_patent_bigdata/models ${DOCKER_COMPOSE_DIR}/fastapi/
                    
                    # requirements.txt 파일 확인/생성
                    if [ ! -f ${DOCKER_COMPOSE_DIR}/fastapi/requirements.txt ]; then
                        cp -f mr_patent_bigdata/requirements.txt ${DOCKER_COMPOSE_DIR}/fastapi/ || true
                        echo "pydantic-settings" >> ${DOCKER_COMPOSE_DIR}/fastapi/requirements.txt
                    fi
                    
                    echo "복사 후 대상 디렉토리 내용:"
                    ls -la ${DOCKER_COMPOSE_DIR}/fastapi
                    
                    # 도커 컨테이너 재빌드 및 시작
                    cd ${DOCKER_COMPOSE_DIR} && 
                    docker-compose stop fastapi || true
                    docker-compose rm -f fastapi || true
                    docker-compose build --no-cache fastapi
                    docker-compose up -d fastapi
                    docker image prune -f || true
                '''
                echo '====== FastAPI 배포 완료 ======'
            }
        }
        
        stage('Notification') {
            steps {
                echo 'jenkins notification!'
            }
        }
    }
    
    post {
        success {
            echo '====== 파이프라인 성공 ======'
            mattermostSend(
                color: 'good',
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR}(${env.GIT_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/hgafhbr6n7fe7japbi7n5tw36o',
                channel: 'D208-GitLab-Build'
            )
        }
        failure {
            echo '====== 파이프라인 실패 ======'
            mattermostSend(
                color: 'danger',
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${env.GIT_AUTHOR}(${env.GIT_EMAIL})\n(<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/hgafhbr6n7fe7japbi7n5tw36o',
                channel: 'D208-GitLab-Build'
            )
        }
        always {
            echo '====== 파이프라인 종료 ======'
            cleanWs()
        }
    }
}